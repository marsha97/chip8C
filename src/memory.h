#include <stdio.h>
#include <stdlib.h>
#include "constants.h"
#include "utils.h"


struct Memory
{
	unsigned char base[MAX_MEMORY];
} mem;

int filesize = 0;

void loadMem(char *filepath) {
	FILE *fileptr;

	if ((fileptr = fopen(filepath, "rb")) == NULL) {
		printf("Load file error, invalid file\n");
		exit(1);
	}

	fseek(fileptr, 0L, SEEK_END);
	filesize = ftell(fileptr);
	rewind(fileptr);

	if (filesize > MAX_MEMORY) {
		printf("Binary file exceeds max value\n");
		exit(1);
	}
	fread(mem.base + INTERPRETER_SIZE, filesize, 1, fileptr);
	fclose(fileptr);
}

void loadFonts() {
	/** 1 sprites sprite has 5 bytes.
		But it is easier to declare it into 1D, because memory in this program only has 1D(u char[])
	**/
	unsigned char characters[90] = {
		0xf0, 0x90, 0x90, 0x90, 0xf0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xf0, 0x10, 0xf0, 0x80, 0xf0, // 2
		0xf0, 0x10, 0xf0, 0x10, 0xf0, // 3
		0x90, 0x90, 0xf0, 0x10, 0x10, // 4
		0xf0, 0x80, 0xf0, 0x10, 0xf0, // 5
		0xf0, 0x80, 0xf0, 0x90, 0xf0, // 6
		0xf0, 0x10, 0x20, 0x40, 0x40, // 7
		0xf0, 0x90, 0xf0, 0x90, 0xf0, // 8
		0xf0, 0x90, 0xf0, 0x10, 0xf0, // 9
		0xf0, 0x90, 0xf0, 0x90, 0x90, // A
		0xe0, 0x90, 0xe0, 0x90, 0xf0, // B
		0xf0, 0x80, 0x80, 0x80, 0xf0, // C
		0xe0, 0x90, 0x90, 0x90, 0xf0, // D
		0xf0, 0x80, 0xf0, 0x80, 0xf0, // E
		0xf0, 0x80, 0xf0, 0x80, 0x80, // F
	};
	for(int i = 0; i < sizeof(characters) / sizeof(characters[0]); i++ ){
		mem.base[i] = characters[i];
	}
}
